
import random
import tkinter as tk
from tkinter import messagebox

def check_winner(board, player):
    # Verifica se algum jogador venceu
    for row in board:
        if all([cell == player for cell in row]):
            return True
    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True
    if all([board[i][i] == player for i in range(3)]) or all([board[i][2 - i] == player for i in range(3)]):
        return True
    return False

def is_full(board):
    # Verifica se o tabuleiro está cheio
    return all([cell != " " for row in board for cell in row])

def make_move(board, player, row, col):
    # Faz uma jogada
    if board[row][col] == " ":
        board[row][col] = player
        return True
    else:
        return False

def ai_move_easy(board, player):
    # Movimento aleatório para o nível fácil
    empty_cells = [(row, col) for row in range(3) for col in range(3) if board[row][col] == " "]
    return random.choice(empty_cells)

class Game:
    def __init__(self, root):
        self.root = root
        self.root.title("Jogo da Velha")
        self.board = [[" " for _ in range(3)] for _ in range(3)]
        self.current_player = "X"
        self.create_board_buttons()

    def create_board_buttons(self):
        self.buttons = [[None for _ in range(3)] for _ in range(3)]
        for i in range(3):
            for j in range(3):
                button = tk.Button(self.root, text=" ", font=("Arial", 16), width=5, height=2, command=lambda row=i, col=j: self.on_button_click(row, col))
                button.grid(row=i, column=j)
                self.buttons[i][j] = button

    def on_button_click(self, row, col):
        if make_move(self.board, self.current_player, row, col):
            self.buttons[row][col].config(text=self.current_player)
            if check_winner(self.board, self.current_player):
                self.show_result(f"Jogador {self.current_player} venceu!")
                return
            if is_full(self.board):
                self.show_result("Empate!")
                return
            self.switch_player()
            self.make_ai_move()

    def switch_player(self):
        self.current_player = "O" if self.current_player == "X" else "X"

    def make_ai_move(self):
        if self.current_player == "O":
            ai_row, ai_col = ai_move_easy(self.board, self.current_player)
            make_move(self.board, self.current_player, ai_row, ai_col)
            self.buttons[ai_row][ai_col].config(text=self.current_player)
            if check_winner(self.board, self.current_player):
                self.show_result(f"Jogador {self.current_player} venceu!")
                return
            if is_full(self.board):
                self.show_result("Empate!")
                return
            self.switch_player()






    def show_result(self, message):
        messagebox.showinfo("Fim de Jogo", message)
        self.root.quit()

def main():
    root = tk.Tk()
    game = Game(root)
    root.mainloop()

if __name__ == "__main__":
    main()
